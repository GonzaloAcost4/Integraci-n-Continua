name: CI + QA + Deploy

on:
  push:
    branches: ["main"]
    
permissions:
  contents: read
  deployments: write 
jobs:
  build-and-test:
    name:  Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Instalar dependencias
        run: npm ci
        
      - name: Build con Vite
        run: npm run build   
        
      - name: Ejecutar tests con Vitest
        run: npx vitest 

      - name: Notificar a Slack (build + test)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "ðŸ§ª *Build & Test finalizado*\nâ€¢ Estado: *${{ job.status }}*\nâ€¢ Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\nâ€¢ Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }

  sonarcloud:
    name:  AnÃ¡lisis SonarCloud
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Instalar dependencias
        run: npm ci
        
      - name: Build de producciÃ³n con Vite
        run: npm run build   
        
      - name: Ejecutar tests con Vitest
        run: npx vitest --coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Notificar a Slack (SonarCloud)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "ðŸ”Ž *SonarCloud finalizado*\nâ€¢ Estado: *${{ job.status }}*\nâ€¢ Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\nâ€¢ Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }

  deploy:
    name: Deploy a Vercel
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - uses: actions/checkout@v3
  
      - name: Instalar dependencias
        run: npm ci

      - name: Build de producciÃ³n con Vite
        run: npm run build      
        
      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Production

      - name: Instalar Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build del proyecto para Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy del proyecto a producciÃ³n
        id: vercel_deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} | grep -Eo 'https://[^ ]+.vercel.app')
          echo "VERCEL_URL=$URL" >> $GITHUB_ENV

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          
      - name: Notificar a Slack (Deploy)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "ðŸš€ *Deploy completado en producciÃ³n*\nâ€¢ Estado: *${{ job.status }}*\nâ€¢ Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\nâ€¢ Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>\nâ€¢ ðŸ”— <${{ env.VERCEL_URL }}|Ver sitio desplegado>"
            }
 
  update-taiga:
    name: updatear taiga
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to access full git history for commit parsing
                
      - name: Update Taiga User Story
        uses: lauacosta/backlogr-action@v0.0.2
        with:
          taiga-username: ${{ secrets.TAIGA_USERNAME }}
          taiga-password: ${{ secrets.TAIGA_PASSWORD }}
          project-name: ${{ secrets.PROJECT_NAME }}
          
      - name: Notificar a Slack (Taiga)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "ðŸ“‹ *ActualizaciÃ³n de Taiga* \nâ€¢ Estado: *${{ job.status }}* \nâ€¢ Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }
