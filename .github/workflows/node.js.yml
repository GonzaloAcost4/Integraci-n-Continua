name: CI + QA + Deploy

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  deployments: write
jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Instalar dependencias
        run: npm ci

      - name: Build con Vite
        run: npm run build

      - name: Ejecutar tests con Vitest
        run: npx vitest

      - name: Notificar a Slack (build + test)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "🧪 *Build & Test finalizado*\n• Estado: *${{ job.status }}*\n• Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }

  sonarcloud:
    name: Análisis SonarCloud
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Instalar dependencias
        run: npm ci

      - name: Build de producción con Vite
        run: npm run build

      - name: Ejecutar tests con Vitest
        run: npx vitest --coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Notificar a Slack (SonarCloud)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "🔎 *SonarCloud finalizado*\n• Estado: *${{ job.status }}*\n• Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }

  deploy:
    name: Deploy a Vercel
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - uses: actions/checkout@v3

      - name: Instalar dependencias
        run: npm ci

      - name: Build de producción con Vite
        run: npm run build

      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Production

      - name: Instalar Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build del proyecto para Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy del proyecto a producción
        id: vercel_deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} | grep -Eo 'https://[^ ]+.vercel.app')
          echo "VERCEL_URL=$URL" >> $GITHUB_ENV

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Notificar a Slack (Deploy)
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "🚀 *Deploy completado en producción*\n• Estado: *${{ job.status }}*\n• Autor: <${{ github.event.sender.html_url }}|${{ github.actor }}>\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>\n• 🔗 <${{ env.VERCEL_URL }}|Ver sitio desplegado>"
            }

  update-taiga:
    name: updatear taiga
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necesario para ver el historial completo
    
    # Verificamos el formato del commit
    - name: Verificar formato del commit
      id: verificar_commit
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%s)
        echo "Mensaje de commit: $COMMIT_MSG"
    
        if [[ "$COMMIT_MSG" =~ ^Merge\ branch ]]; then
          echo "🔄 Commit de merge detectado, se saltea verificación"
          echo "valido=merge" >> "$GITHUB_OUTPUT"
          exit 0
        fi
    
        if [[ "$COMMIT_MSG" =~ ^(feat|fix|done):\ .+\ \(#([0-9]+)\)$ ]]; then
          echo "✅ Commit válido"
          echo "valido=true" >> "$GITHUB_OUTPUT"
        else
          echo "❌ Formato inválido"
          echo "valido=false" >> "$GITHUB_OUTPUT"
        fi
    
    # Actualización en Taiga solo si el commit es válido o merge
    - name: Actualizar Taiga
      if: steps.verificar_commit.outputs.valido != 'false'
      id: taiga
      uses: lauacosta/backlogr-action@v0.0.2
      continue-on-error: true
      with:
        taiga-username: ${{ secrets.TAIGA_USERNAME }}
        taiga-password: ${{ secrets.TAIGA_PASSWORD }}
        project-name: ${{ secrets.PROJECT_NAME }}
    
    # Determinar si falló la actualización
    - name: Verificar estado de Taiga
      if: steps.verificar_commit.outputs.valido != 'false'
      run: |
        if [ "${{ steps.taiga.outputs.success }}" == "true" ]; then
          echo "✅ User Story #${{ steps.taiga.outputs.user-story-id }} → ${{ steps.taiga.outputs.action-taken }}"
        else
          echo "❌ Falló la actualización de Taiga"
          exit 1
        fi
    
    # Notificación si el commit fue inválido
    - name: Notificar formato inválido en Slack
      if: steps.verificar_commit.outputs.valido == 'false'
      uses: slackapi/slack-github-action@v2.1.0
      with:
        method: chat.postMessage
        token: ${{ secrets.SLACK_BOT_TOKEN }}
        payload: >
          {
            "channel": "${{ secrets.SLACK_CHANNEL_ID2 }}",
            "text": "❌ *Falló la actualización de Taiga - Formato de commit inválido*\n• Estado: failed\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>\n• Mensaje de commit: ${{ github.event.head_commit.message }}\n• Formato esperado: modifier: descripción (#user-story-id)\n• 🔗 <https://tree.taiga.io/project/gonzaloacost4-integracioncontinua/kanban|Ver Kanban>"
          }

    
    - name: Notificar estado final en Slack
      if: steps.verificar_commit.outputs.valido == 'true'
      uses: slackapi/slack-github-action@v2.1.0 
      with:
        method: chat.postMessage
        token: ${{ secrets.SLACK_BOT_TOKEN }}
        payload: >
          {
            "channel": "${{ secrets.SLACK_CHANNEL_ID2 }}",
            "text": "${{ job.status == 'success' && steps.verificar_commit.outputs.valido != 'false' && steps.taiga.outputs.success == 'true' && '✅ Actualización de Taiga completada' || '❌ Falló la actualización de Taiga' }}\n• Estado: ${{ job.status }}\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>\n• Mensaje de commit: ${{ github.event.head_commit.message }}\n• 🔗 <https://tree.taiga.io/project/gonzaloacost4-integracioncontinua/kanban|Ver Kanban>"
          }


  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v4

      - name: Instalar Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Ejecutar Lighthouse en producción
        run: |
          lhci autorun --collect.url=https://integraci-n-continua-gonzaloacost4s-projects.vercel.app/ \
                       --collect.numberOfRuns=1 \
                       --upload.target=temporary-public-storage \
                       --collect.settings.chromeFlags="--no-sandbox"

      - name: Notificar resultado a Slack
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: >
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID3 }}",
              "text": "📊 *Lighthouse ejecutado en producción*\n• URL: <https://integraci-n-continua-gonzaloacost4s-projects.vercel.app/>\n• Estado: *${{ job.status }}*\n• Commit: <${{ github.event.head_commit.url }}|${{ github.sha }}>"
            }
